// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Auth tables for NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String
  userId       String
  expires      DateTime @db.DateTime(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionToken])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?
  emailVerified DateTime? @db.DateTime(6)
  image         String?
  accounts      Account[]
  sessions      Session[]
  notes         Note[]
  createdAt     DateTime  @default(now()) @db.DateTime(6)
  updatedAt     DateTime  @updatedAt @db.DateTime(6)

  @@index([email])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String
  expires    DateTime @db.DateTime(6)

  @@index([token])
  @@index([identifier, token])
}

// Notes table with user relationship
model Note {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?  @db.Text
  userId    String?  // Optional for now, will be required after auth is implemented
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  links     Json?    // Array of connected note IDs stored as JSON
  createdAt DateTime @default(now()) @db.DateTime(6)
  updatedAt DateTime @updatedAt @db.DateTime(6)
}